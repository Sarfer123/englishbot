import asyncio
import logging 

from aiogram import Bot, Dispatcher, executor, types

import markup as nav

TOKEN = '5166630869:AAGl1Maq4ELZuOszKi828IHPDPLTuUWnRcI'
CHANNEL_ID = "@englishlanguageforlife"
NOTSUB_MESSAGE = """–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª‚úîÔ∏è
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–πüá¨üáß"""

bot = Bot(token = TOKEN)
dp = Dispatcher(bot)

def check_sub_channel(chat_member):
	print(chat_member['status'])
	if chat_member['status'] != 'left':
		return True
	else:
		return False

@dp.message_handler(commands = ['start'])
async def command_start(message: types.Message):
	if check_sub_channel(await bot.get_chat_member(chat_id = CHANNEL_ID, user_id = message.from_user.id)):
		await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç, {0.first_name}üëã 
–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:""".format(message.from_user), reply_markup = nav.mainMenu)
	else: 
		await bot.send_message(message.from_user.id, NOTSUB_MESSAGE, reply_markup = nav.otherMenu5)

@dp.callback_query_handler(lambda c: c.data == 'subchanneldone')
async def process_callback_btn24(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, """–ü—Ä–∏–≤–µ—Çüëã 
–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:""", reply_markup = nav.mainMenu)

@dp.callback_query_handler(lambda c: c.data == 'presentsimple')
async def process_callback_btn27(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, "I usually (go) to school.", reply_markup = nav.otherMenu7)

@dp.callback_query_handler(lambda c: c.data == '1')
async def process_callback_btn28(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚úÖ–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢‚úÖ")
		await bot.send_message(callback_query.from_user.id, "They (visit) us often.", reply_markup = nav.otherMenu8)

@dp.callback_query_handler(lambda c: c.data == '2')
async def process_callback_btn29(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

2. goes 
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è 
he, she, it""")

@dp.callback_query_handler(lambda c: c.data == '3')
async def process_callback_btn28(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

3. going 
–§–æ—Ä–º–∞ Present Continuous""")

@dp.callback_query_handler(lambda c: c.data == '4')
async def process_callback_btn29(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

1. visits 
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è 
he, she, it""")

@dp.callback_query_handler(lambda c: c.data == '5')
async def process_callback_btn28(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚úÖ–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢‚úÖ")
		await bot.send_message(callback_query.from_user.id, "You (play) basketball once a week.", reply_markup = nav.otherMenu9)

@dp.callback_query_handler(lambda c: c.data == '6')
async def process_callback_btn29(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

3. visiting 
–§–æ—Ä–º–∞ Present Continuous""")

@dp.callback_query_handler(lambda c: c.data == '7')
async def process_callback_btn29(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

1. plays 
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è 
he, she, it""")

@dp.callback_query_handler(lambda c: c.data == '8')
async def process_callback_btn29(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

2. playing 
–§–æ—Ä–º–∞ Present Continuous""")

@dp.callback_query_handler(lambda c: c.data == '9')
async def process_callback_btn28(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚úÖ–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢‚úÖ")
		await bot.send_message(callback_query.from_user.id, "Tom (work) every day.", reply_markup = nav.otherMenu10)

@dp.callback_query_handler(lambda c: c.data == '10')
async def process_callback_btn28(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚úÖ–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢‚úÖ")
		await bot.send_message(callback_query.from_user.id, "He always (tell) us funny stories.", reply_markup = nav.otherMenu11)

@dp.callback_query_handler(lambda c: c.data == '11')
async def process_callback_btn29(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

2. working 
–§–æ—Ä–º–∞ Present Continuous""")

@dp.callback_query_handler(lambda c: c.data == '12')
async def process_callback_btn28(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

3. work 
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è 
he, she, it""")

@dp.callback_query_handler(lambda c: c.data == '13')
async def process_callback_btn28(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚úÖ–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢‚úÖ")
		await bot.send_message(callback_query.from_user.id, """–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!
–¢—ã –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –ø–æ Present Simple""")

@dp.callback_query_handler(lambda c: c.data == '14')
async def process_callback_btn29(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

3. telling 
–§–æ—Ä–º–∞ Present Continuous""")

@dp.callback_query_handler(lambda c: c.data == '15')
async def process_callback_btn29(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id, text = "‚ùå–ù–ï–í–ï–†–ù–´–ô –û–¢–í–ï–¢‚ùå")
		await bot.send_message(callback_query.from_user.id, """‚ùå–ü–û–ü–†–û–ë–£–ô –ï–©–ï –†–ê–ó‚ùå

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:

1. tell 
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è 
I, we, you, they""")

@dp.message_handler()
async def bot_message(message: types.Message):
	if message.text == 'üñã –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞':
		await bot.send_message(message.from_user.id, 'üñã –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞', reply_markup = nav.otherMenu)

	elif message.text == 'üìö –õ–µ–∫—Å–∏–∫–∞':
		await bot.send_message(message.from_user.id, 'üìö –õ–µ–∫—Å–∏–∫–∞', reply_markup = nav.otherMenu1)
	
	elif message.text == 'üåê –ë—É–¥—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è':
		await bot.send_message(message.from_user.id, """–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω
–≥–µ—Ä—É–Ω–¥–∏–π –∏ –ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥""")

	elif message.text == '‚úÖ Present':
		await bot.send_message(message.from_user.id, '‚úÖ Present', reply_markup = nav.otherMenu2)

	elif message.text == '‚úÖ Past':
		await bot.send_message(message.from_user.id, '‚úÖ Past', reply_markup = nav.otherMenu3)

	elif message.text == '‚úÖ Future':
		await bot.send_message(message.from_user.id, '‚úÖ Future', reply_markup = nav.otherMenu4)

	elif message.text == 'üìñ –°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Top-100-CHasto-ispolzuemyh-slov-02-06")

	elif message.text == 'üìñ –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Samye-chastye-prilagatelnye-02-06")

	elif message.text == 'üìñ –ì–ª–∞–≥–æ–ª—ã':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Samye-chastye-glagoly-v-anglijskom-yazyke-02-06")

	elif message.text == '‚úÖ Present Simple':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Present-Simple-02-06", reply_markup = nav.otherMenu6)

	elif message.text == '‚úÖ Present Continuous':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Present-Continuous-02-06")

	elif message.text == '‚úÖ Present Perfect':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Present-Perfect-02-06")

	elif message.text == '‚úÖ Present Perfect Continuous':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Present-Perfect-Continuous-02-06")

	elif message.text == '‚úÖ Past Simple':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Past-Simple-02-06")

	elif message.text == '‚úÖ Past Continuous':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Past-Continuous-02-06")

	elif message.text == '‚úÖ Past Perfect':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Past-Perfect-02-06")

	elif message.text == '‚úÖ Past Perfect Continuous':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Past-Perfect-Continuous-02-06")

	elif message.text == '‚úÖ Future Simple':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Future-Simple-02-06")

	elif message.text == '‚úÖ Future Continuous':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Future-Continuous-02-06")

	elif message.text == '‚úÖ Future Perfect':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Future-Perfect-02-06")

	elif message.text == '‚úÖ Future Perfect Continuous':
		await bot.send_message(message.from_user.id, "https://telegra.ph/Future-Perfect-Continuous-02-06")

	elif message.text == 'üîô–ù–∞–∑–∞–¥':
		await bot.send_message(message.from_user.id, 'üîô–ù–∞–∑–∞–¥', reply_markup = nav.mainMenu)
	
	elif message.text == 'üîô–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏':
		await bot.send_message(message.from_user.id, 'üîô–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏', reply_markup = nav.otherMenu)

	elif message.text == 'I usually (go) to school.':
		await bot.send_message(message.from_user.id, "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup = nav.otherMenu7)

if __name__ == '__main__':
	executor.start_polling(dp, skip_updates = True)
